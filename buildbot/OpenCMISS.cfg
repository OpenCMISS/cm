#######################################
##           Slaves
########################################
from buildbot.buildslave import BuildSlave

c['slaves'].append(BuildSlave("x86_64-linux-intel", "buildbot"))
c['slaves'].append(BuildSlave("x86_64-linux-gnu_system", "buildbot"))
c['slaves'].append(BuildSlave("x86_64-linux-gnu_opencmiss", "buildbot"))
c['slaves'].append(BuildSlave("i686-linux-intel", "buildbot"))
c['slaves'].append(BuildSlave("i686-linux-gnu_system", "buildbot"))
c['slaves'].append(BuildSlave("i686-linux-gnu_opencmiss", "buildbot"))
#c['slaves'].append(BuildSlave("nesi_cluster", "buildbot"))

#######################################
##           Factories
########################################
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand, SetProperty
from buildbot.steps.source import Git, SVN
from opencmiss.steps.shell import ShellCommandWithHtmlLog
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.trigger import Trigger
from buildbot.process.properties import WithProperties, Property
from buildbot.steps.slave import SetPropertiesFromEnv

opencmiss_root = "/home/opencmiss/opencmiss/OpenCMISS"
opencmissextras_root = "/home/opencmiss/opencmiss/OpenCMISSExtras"
opencmiss_repository = "http://github.com/opencmiss"

###############OpenCMISSExtras#######################

f_linux_OpenCMISSExtras=BuildFactory()

### checkout and clean ###
f_linux_OpenCMISSExtras.addStep(SVN(baseURL='https://svn.physiomeproject.org/svn/opencmissextras/utils/',defaultBranch='trunk',workdir=opencmissextras_root+"/utils"))
f_linux_OpenCMISSExtras.addStep(ShellCommand(name="Checkout opencmissextras",command=["make","checkout"],workdir=opencmissextras_root+"/utils"))
f_linux_OpenCMISSExtras.addStep(ShellCommand(name="Clean opencmissextras",command=["make","clean"],workdir=opencmissextras_root+"/utils"))

### opencmissextras ###
f_linux_OpenCMISSExtras.addStep(ShellCommand(name="Build opencmissextras",command=["make",WithProperties('%(repository:~main)s'),WithProperties('%(build_type:-DEBUG)s=true')],workdir=opencmissextras_root+"/utils",timeout=10000))

f_opencmissextras_monthly = BuildFactory()
f_opencmissextras_monthly.addStep(Trigger(schedulerNames=['opencmissextras-intel'],waitForFinish=True))
f_opencmissextras_monthly.addStep(Trigger(schedulerNames=['opencmissextras-gnu_system'],waitForFinish=True))
f_opencmissextras_monthly.addStep(Trigger(schedulerNames=['opencmissextras-gnu_opencmiss'],waitForFinish=True))


###############OpenCMISS#######################
f_linux_OpenCMISS=BuildFactory()

### checkout and install nose plugins
f_linux_OpenCMISS.addStep(Git(repourl=opencmiss_repository+"/cm.git",workdir=opencmiss_root+"/cm", env={'http_proxy' : 'http://proxy.bioeng.auckland.ac.nz:8080'}))
f_linux_OpenCMISS.addStep(Git(repourl=opencmiss_repository+"/examples.git",workdir=opencmiss_root+"/examples",env={'http_proxy' : 'http://proxy.bioeng.auckland.ac.nz:8080'}))
f_linux_OpenCMISS.addStep(Git(repourl=opencmiss_repository+"/cellml.git",workdir=opencmiss_root+"/cellml",env={'http_proxy' : 'http://proxy.bioeng.auckland.ac.nz:8080'}))


### Build and OpenCMISS Libraries 
f_linux_OpenCMISS.addStep(ShellCommand(name="Build CellML",command=["make"],workdir=opencmiss_root+"/cellml"))
f_linux_OpenCMISS.addStep(ShellCommand(name="Clean OpenCMISS",command=["make","clean"],workdir=opencmiss_root+"/cm"))
f_linux_OpenCMISS.addStep(ShellCommand(name="Build OpenCMISS",command=["make"],workdir=opencmiss_root+"/cm"))
f_linux_OpenCMISS.addStep(ShellCommand(name="Build OpenCMISS(python)",command=["make","python"],workdir=opencmiss_root+"/cm"))

### Build and test examples
f_linux_OpenCMISS.addStep(ShellCommandWithHtmlLog(name="Nightly Test",command=["python","run_tests.py", "html"],env={"SIZE":WithProperties('%(build_size:-small)s'),"DIR":WithProperties('%(example_dir:-.)s')},workdir=opencmiss_root+"/examples/scripts",timeout=7200))

### Upload the logs
f_linux_OpenCMISS.addStep(SetProperty(command="echo $archname",property="archname"))
f_linux_OpenCMISS.addStep(DirectoryUpload(slavesrc="logs",workdir=opencmiss_root+"/build",masterdest=WithProperties('public_html/logs_%(archname)s')))

f_opencmiss_nightly = BuildFactory()
f_opencmiss_nightly.addStep(Trigger(schedulerNames=['opencmiss-intel'],waitForFinish=True))
f_opencmiss_nightly.addStep(Trigger(schedulerNames=['opencmiss-gnu_system'],waitForFinish=True))
f_opencmiss_nightly.addStep(Trigger(schedulerNames=['opencmiss-gnu_opencmiss'],waitForFinish=True))
f_opencmiss_nightly.addStep(Trigger(schedulerNames=['opencmiss-doc'],waitForFinish=True))

##############Documentation########################################

f_doc = BuildFactory()

f_doc.addStep(ShellCommand(name="doxy clean",command=["make","clean"], workdir=opencmiss_root+"/cm/doc"))
f_doc.addStep(ShellCommand(name="doxy Build",command=["make","install"],workdir=opencmiss_root+"/cm/doc"))
f_doc.addStep(ShellCommand(name="doxy relocate",command=["make","relocate"],workdir=opencmiss_root+"/cm/doc"))
f_doc.addStep(ShellCommand(name="index upload",command=["scp","index.html","tyu011@hpc3:/hpc/cmissweb/htdocs/OpenCMISS/doc"],workdir=opencmiss_root+"/cm/doc/doxy"))
f_doc.addStep(ShellCommand(name="programmer doc upload",command=["scp","-r","programmer","tyu011@hpc3:/hpc/cmissweb/htdocs/OpenCMISS/doc"],workdir=opencmiss_root+"/cm/doc/doxy"))
f_doc.addStep(ShellCommand(name="user doc upload",command=["scp","-r","user","tyu011@hpc3:/hpc/cmissweb/htdocs/OpenCMISS/doc"],workdir=opencmiss_root+"/cm/doc/doxy"))
f_doc.addStep(ShellCommand(name="latex pdf upload",command=["scp","OpenCMISSNotes.pdf","tyu011@hpc3:/hpc/cmissweb/htdocs/OpenCMISS/doc"],workdir=opencmiss_root+"/cm/doc/doxy"))
f_doc.addStep(ShellCommand(name="latex html upload",command=["scp","-r","latexhtml","tyu011@hpc3:/hpc/cmissweb/htdocs/OpenCMISS/doc"],workdir=opencmiss_root+"/cm/doc/doxy"))

#######################################
##           Builders
########################################

systems_list = ['x86_64-linux','i686-linux']

compilers_list = ['intel','gnu_system','gnu_opencmiss']

for system in systems_list :
    for compiler in compilers_list :
        c['builders'].append(
                {'name':'%s-%s-OpenCMISSExtras' %(system, compiler),
                 'slavename':'%s-%s' %(system, compiler),
                 'builddir':'%s-%s/OpenCMISSExtras' %(system, compiler),
                 'factory':f_linux_OpenCMISSExtras})

        c['builders'].append(
               {'name':'%s-%s-OpenCMISS' %(system, compiler),
                'slavename':'%s-%s' %(system, compiler),
                'builddir':'%s-%s/OpenCMISS' %(system, compiler),
                'factory':f_linux_OpenCMISS})

c['builders'].append(
    {'name':'documentation',
    'slavename':'x86_64-linux-intel',
    'builddir':'prep',
    'factory':f_doc
    })

c['builders'].append(
    {'name':'OpenCMISSExtras-monthly',
    'slavename':'x86_64-linux-intel',
    'builddir':'trigger_opencmissextras',
    'factory':f_opencmissextras_monthly
    })

c['builders'].append(
    {'name':'OpenCMISS-nightly',
    'slavename':'x86_64-linux-intel',
    'builddir':'trigger_opencmiss',
    'factory':f_opencmiss_nightly
    })



#######################################
##           Schedulers
########################################

from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers.forcesched import ForceScheduler,StringParameter,FixedParameter,ChoiceStringParameter

opencmissextras_intel = Triggerable(name="opencmissextras-intel", builderNames=['x86_64-linux-intel-OpenCMISSExtras'])
opencmissextras_gnu_system = Triggerable(name="opencmissextras-gnu_system", builderNames=['x86_64-linux-gnu_system-OpenCMISSExtras','i686-linux-gnu_system-OpenCMISSExtras'])
opencmissextras_gnu_opencmiss = Triggerable(name="opencmissextras-gnu_opencmiss", builderNames=['x86_64-linux-gnu_opencmiss-OpenCMISSExtras','i686-linux-gnu_opencmiss-OpenCMISSExtras'])
opencmiss_intel = Triggerable(name="opencmiss-intel",builderNames=['x86_64-linux-intel-OpenCMISS'])
opencmiss_gnu_system = Triggerable(name="opencmiss-gnu_system", builderNames=['x86_64-linux-gnu_system-OpenCMISS','i686-linux-gnu_system-OpenCMISS'])
opencmiss_gnu_opencmiss = Triggerable(name="opencmiss-gnu_opencmiss", builderNames=['x86_64-linux-gnu_opencmiss-OpenCMISS','i686-linux-gnu_opencmiss-OpenCMISS'])
documentation = Triggerable(name="opencmiss-doc", builderNames=['documentation'])

opencmissextras_monthly = Nightly(name="opencmissextras-monthly",
                           builderNames=['OpenCMISSExtras-monthly'],
                           dayOfMonth=1,hour=7, minute=0,branch=None)
opencmiss_nightly =  Nightly(name="opencmiss_nightly",
                           builderNames=['OpenCMISS-nightly'],
                           hour=5, minute=10,branch=None)


build_type = ChoiceStringParameter(name="build_type",label = "Build type",default="DEBUG",choices = ["OPT","DEBUG"])
repository = ChoiceStringParameter(name="repository",label = "Repository",default="",choices = ["cellml_repository","cm_repository","cmake_repository","common_repository","fieldml_repository","gfortran_repository","git_repository","mpi_repository"])
build_size = ChoiceStringParameter(name="build_size",label = "Build Size",default="small",choices = ["small","large"])
example_dir = StringParameter(name="example_dir",label="Examples Directory:",default=".",required=True, size=80)
reason = StringParameter(name="reason",label="Reason:",required=True, size=80)


opencmissextras_force = ForceScheduler(name="force_opencmissextras",
                                       builderNames=["x86_64-linux-intel-OpenCMISSExtras",
                                                     "x86_64-linux-gnu_system-OpenCMISSExtras",
                                                     "x86_64-linux-gnu_opencmiss-OpenCMISSExtras",
                                                     "x86_64-linux-intel-OpenCMISSExtras",
                                                     "i686-linux-intel-OpenCMISSExtras",
                                                     "i686-linux-gnu_system-OpenCMISSExtras",
                                                     "i686-linux-gnu_opencmiss-OpenCMISSExtras"],
                                       reason=reason,
                                       branch=FixedParameter(name="branch", default=""),
                                       revision=FixedParameter(name="revision", default=""),
                                       repository=repository,
                                       project=FixedParameter(name="repository", default=""),
                                       properties=[build_type])


opencmiss_force = ForceScheduler(name="force_opencmiss",
                                 builderNames=["x86_64-linux-intel-OpenCMISS",
                                               "x86_64-linux-gnu_system-OpenCMISS",
                                               "x86_64-linux-gnu_opencmiss-OpenCMISS",
                                               "x86_64-linux-intel-OpenCMISS",
                                               "i686-linux-intel-OpenCMISS",
                                               "i686-linux-gnu_system-OpenCMISS",
                                               "i686-linux-gnu_opencmiss-OpenCMISS"],
                                 reason=StringParameter(name="reason",label="Reason:",required=True, size=80),
                                 branch=FixedParameter(name="branch", default=""),
                                 revision=FixedParameter(name="revision", default=""),
                                 repository=FixedParameter(name="repository", default=""),
                                 project=FixedParameter(name="repository", default=""),
                                 properties=[build_type,build_size,example_dir])


doc_force = ForceScheduler(name="force_doc",
                                 builderNames=["documentation"],
                                 reason=StringParameter(name="reason",label="Reason:",required=True, size=80),
                                 branch=FixedParameter(name="branch", default=""),
                                 revision=FixedParameter(name="revision", default=""),
                                 repository=FixedParameter(name="repository", default=""),
                                 project=FixedParameter(name="repository", default=""),
                                 properties=[])

   
c['schedulers'].append(opencmissextras_intel)
c['schedulers'].append(opencmissextras_gnu_system)
c['schedulers'].append(opencmissextras_gnu_opencmiss)
c['schedulers'].append(opencmiss_intel)
c['schedulers'].append(opencmiss_gnu_system)
c['schedulers'].append(opencmiss_gnu_opencmiss)
c['schedulers'].append(documentation)
c['schedulers'].append(opencmissextras_monthly)
c['schedulers'].append(opencmiss_nightly)
c['schedulers'].append(opencmissextras_force)
c['schedulers'].append(opencmiss_force)
c['schedulers'].append(doc_force)

################################################
##           Status
################################################

from buildbot.status.mail import MailNotifier
from buildbot.status.html import WebStatus

c['status'].append(WebStatus(http_port=8888,allowForce=False))
c['status'].append(WebStatus(http_port=8889,allowForce=True))


mn = MailNotifier(fromaddr="noreply@bioeng.auckland.ac.nz",
                  builders=['x86_64-linux-intel-OpenCMISS','x86_64-linux-gnu_system-OpenCMISS','x86_64-linux-gnu_opencmiss-OpenCMISS','i686-linux-gnu_system-OpenCMISS','i686-linux-gnu_opencmiss-OpenCMISS','documentation'],
                  relayhost="mailhost.auckland.ac.nz",
                  sendToInterestedUsers=False,
                  extraRecipients=['opencmiss-automated1@lists.sourceforge.net'], mode="failing")

c['status'].append(mn)
