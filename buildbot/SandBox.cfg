#######################################
##           Factories
########################################
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source import Git
from opencmiss.steps.shell import ShellCommandWithHtmlTree
from buildbot.steps.transfer import DirectoryUpload
from buildbot.process.properties import WithProperties
from buildbot.process.properties import Property

sandbox_opencmiss_root = "/home/opencmiss/sandbox/OpenCMISS"
opencmissextras_root = "/home/opencmiss/opencmiss/OpenCMISSExtras"


###############OpenCMISS#######################
f_x86_64_linux_sandbox_OpenCMISS=BuildFactory()

### checkout and install nose plugins
f_x86_64_linux_sandbox_OpenCMISS.addStep(Git(repourl=Property("repository"),branch=Property("branch"),workdir=sandbox_opencmiss_root+"/cm"))
f_x86_64_linux_sandbox_OpenCMISS.addStep(Git(repourl=WithProperties("%(sandbox_repository_examples)s"),branch=WithProperties("%(sandbox_branch_examples)s"),workdir=sandbox_opencmiss_root+"/examples"))
f_x86_64_linux_sandbox_OpenCMISS.addStep(Git(repourl=WithProperties("%(sandbox_repository_cellml)s"),branch=WithProperties("%(sandbox_branch_cellml)s"),workdir=sandbox_opencmiss_root+"/cellml"))
f_x86_64_linux_sandbox_OpenCMISS.addStep(ShellCommand(name="Build the new Html Plugin",command=["easy_install","--install-dir","/home/opencmiss/local","."],workdir=sandbox_opencmiss_root+"/cm/utils/noseplugins"))


### Build and test OpenCMISS 
f_x86_64_linux_sandbox_OpenCMISS.addStep(ShellCommand(name="Build CellML",command=["make"],env={'OPENCMISS_ROOT':sandbox_opencmiss_root},workdir=sandbox_opencmiss_root+"/cellml"))
f_x86_64_linux_sandbox_OpenCMISS.addStep(ShellCommandWithHtmlTree(name="Nightly Test",command=["nosetests","--with-html-output","noseMain.py"],env={"SIZE":WithProperties('%(sandbox_build_size:-small)s'),"DIR":WithProperties('%(sandbox_example_dir:-.)s'),'OPENCMISS_ROOT':sandbox_opencmiss_root},workdir=sandbox_opencmiss_root+"/examples",timeout=3600))

### Upload the logs
f_x86_64_linux_sandbox_OpenCMISS.addStep(DirectoryUpload(slavesrc="logs",workdir=sandbox_opencmiss_root+"/build",masterdest="public_html/logs_x86_64-linux"))


#######################################
##           Builders
#######################################

c['builders'].append(
     {'name':'sandbox',
      'slavename':'x86_64-linux-gnu_opencmiss',
      'builddir':'sandbox/OpenCMISS',
      'factory':f_x86_64_linux_sandbox_OpenCMISS})

#######################################
##           Schedulers
########################################

from buildbot.schedulers.forcesched import ForceScheduler,StringParameter,FixedParameter,ChoiceStringParameter

sandbox_build_type = ChoiceStringParameter(name="sandbox_build_type",label = "Build type",default="DEBUG",choices = ["OPT","DEBUG"])
sandbox_build_size = ChoiceStringParameter(name="sandbox_build_size",label = "Build Size",default="small",choices = ["small","large"])
sandbox_example_dir = StringParameter(name="sandbox_example_dir",label="Examples Directory:",default=".",required=True, size=80)
sandbox_reason = StringParameter(name="sandbox_reason",label="Reason:", default="Tests",size=80)
sandbox_repository_cm = StringParameter(name="sandbox_repository_cm",label="cm Repository",required=True, default="http://github.com/OpenCMISS/cm.git",size=80)
sandbox_branch_cm = StringParameter(name="sandbox_branch_cm",label="cm Branch:",required=True, default="master",size=30)
sandbox_repository_examples = StringParameter(name="sandbox_repository_examples",label="examples Repository",required=True, default="http://github.com/OpenCMISS/examples.git",size=80)
sandbox_branch_examples = StringParameter(name="sandbox_branch_examples",label="examples Branch:",required=True, default="master",size=30)
sandbox_repository_cellml = StringParameter(name="sandbox_repository_cellml",label="cellml Repository",required=True, default="http://github.com/OpenCMISS/cellml.git",size=80)
sandbox_branch_cellml = StringParameter(name="sandbox_branch_cellml",label="cellml Branch:",required=True, default="master",size=30)
sandbox_email = StringParameter(name="sandbox_email",label="Email:",required=True, default="@",size=80)

sandbox_opencmiss = ForceScheduler(name="sandbox_opencmiss",
                                 builderNames=["sandbox"],
                                 reason=sandbox_reason,
                                 branch=sandbox_branch_cm,
                                 revision=FixedParameter(name="revision", default=""),
                                 repository=sandbox_repository_cm,
                                 project=FixedParameter(name="project", default=""),
                                 properties=[sandbox_repository_examples,sandbox_branch_examples,sandbox_repository_cellml,sandbox_branch_cellml,sandbox_build_type,sandbox_build_size,sandbox_example_dir])


c['schedulers'].append(sandbox_opencmiss)

################################################
##           Status
################################################

#from buildbot.status.mail import MailNotifier

#sandbox_mn = MailNotifier(fromaddr="noreply@bioeng.auckland.ac.nz",
#                  builders=['sandbox'],
#                  relayhost="mailhost.auckland.ac.nz",
#                  sendToInterestedUsers=False,
#                  extraRecipients=[Property('sandbox_email')])

#c['status'].append(sandbox_mn)
