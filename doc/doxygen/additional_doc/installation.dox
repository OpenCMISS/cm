 /*!
\page installation Obtaining the Code and Setting up the Development Environment
\section obtain_code_and_libraries Obtaining the Code and Libraries
To obtain the OpenCMISS source you need to clone the Git repository.
There are three parts of OpenCMISS to obtain - OpenCMISS itself, the OpenCMISS examples, and the various libraries it needs.
In your root OpenCMISS directory, make the opencmiss and opencmissextras directories.
Within the opencmiss directory there are three repositories - cm, examples and cellml.
Within the opencmissextras directory there are cm and cellml directories.
\subsection obtain_the_code Obtain the Code
If you wish to make changes to OpenCMISS it is recommended that you fork the repositories on GitHub so that
your changes can be pulled into the central repository from your GitHub account.
The process of forking the OpenCMISS repositories and the workflow to use with Git is described in
a page on the OpenCMISS wiki (https://sourceforge.net/apps/mediawiki/opencmiss/index.php?title=Proposed_Workflow). It is recommended 
to make a directory called "opencmiss" and this will be your opencmiss root directory.  
The OpenCMISS cm repository is at https://github.com/OpenCMISS/cm and the OpenCMISS examples
repository is at https://github.com/OpenCMISS/examples/.
The OpenCMISS cellml repository is at https://github.com/OpenCMISS/cellml/.
Once you have forked the OpenCMISS cm, examples and cellml repositories on GitHub, you can clone them
to your local machine by issuing the following commands in the "opencmiss" directory,
where <username> should be replaced with your GitHub username:
\code git clone https://github.com/<username>/cm.git cm
 git clone https://github.com/<username>/examples.git examples
 git clone https://github.com/<username>/cellml.git cellml \endcode
If you know you will not need to make changes to one or more of the repositories you can
clone them directly from https://github.com/OpenCMISS/.
\subsection obtain_the_libraries Obtain the Libraries
The libraries required for building and running OpenCMISS are in a Subversion repository at https://svn.physiomeproject.org/svn/opencmissextras/.
There are a number of different components to the libraries. To use OpenCMISS you will need to
check out libraries from the cm, fieldml, cellml, common and utils components.

To check out the main trunk of the various cm libraries required with OpenCMISS issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/cm/trunk/external/architecture cm/external/architecture \endcode
where architecture is the appropriate architecture for the machine. Possible architectures are:
- i386-win32
- i386-win32-debug
- i686-linux
- i686-linux-debug
- ppc-64-linux
- ppc-64-linux-debug
- rs6000-32-aix
- rs6000-32-aix-debug
- x86_64-linux
- x86_64-linux-debug
- x86_64-linux-mpiprof
- x86_64-linux-prof
.
Furthermore, a number of external packages can be checked out from https://svn.physiomeproject.org/svn/opencmissextras/cm/. To check out the packages from the code repository issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/cm/trunk/external/packages cm/external/packages \endcode
Please note that this packages directory is extremely large and is only required if you want to build the opencmissextras/cm libraries from scratch.

To check out the main trunk of the various MPI libraries required with OpenCMISS issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/mpi/trunk/architecture mpi/architecture \endcode
where architecture is the appropriate architecture for the machine. Currently, the list of possible achitectures comprehends:
- x86_64-linux
- x86_64-linux-debug
.
There is also a packages directory for MPI in the code repository. To check it out issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/mpi/trunk/packages mpi/packages \endcode

To check out the main trunk of the various cellml libraries required with OpenCMISS issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/cellml/trunk/architecture cellml/architecture \endcode
where architecture is the appropriate architecture for the machine. Currently, the list of possible achitectures comprehends:
- x86_64-linux
- x86_64-linux-debug
.
There is also a packages directory for cellml in the code repository. To check it out issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/cellml/trunk/packages cellml/packages \endcode

To check out the main trunk of the various fieldml libraries required with OpenCMISS issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/fieldml/trunk/architecture fieldml/architecture \endcode
where architecture is the appropriate architecture for the machine. Currently, the list of possible achitectures comprehends:
- i686-linux
- i686-linux-debug
- x86_64-linux
- x86_64-linux-debug
.
There is also a packages directory for fieldml in the code repository. To check it out issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/fieldml/trunk/packages fieldml/packages \endcode

To check out the main trunk of the various common libraries required with OpenCMISS issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/common/trunk/architecture common/architecture \endcode
where architecture is the appropriate architecture for the machine. Currently, the list of possible achitectures comprehends:
- i686-linux
- i686-linux-debug
- x86_64-linux
- x86_64-linux-debug
.
There is also a packages directory for common in the code repository. To check it out issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/common/trunk/packages common/packages \endcode

Finally, to check out themain trunk of the various utils in the code repository. To check it out issue the following command in the opencmissextras directory:
\code svn co https://svn.physiomeproject.org/svn/opencmissextras/utils/trunk utils\endcode

-For Auckland users, you may simply set your OPENCMISSEXTRAS_ROOT environment variable to point to the libraries on hpc without creating an opencmissextras directory:
\code setenv OPENCMISSEXTRAS_ROOT /hpc/cmiss/opencmissextras\endcode or \code export OPENCMISSEXTRAS_ROOT=/hpc/cmiss/opencmissextras\endcode

\section project_setup Project Setup

\subsection project_setup_aix On AIX 5.3 (HPC)

\subsubsection project_setup_hpc_environment Set environment

Set environment variable to point to OpenCMISS
\code setenv OPENCMISS_ROOT <path to your opencmiss folder>\endcode or \code export OPENCMISS_ROOT=<path to your opencmiss folder>\endcode
Set environment variable to point to OpenCMISS-extras
\code setenv OPENCMISSEXTRAS_ROOT <path to your opencmissextras folder>\endcode or \code export OPENCMISSEXTRAS_ROOT=<path to your opencmissextras folder>\endcode
Set environment variable to point to OpenCMISS examples
\code setenv OPENCMISSEXAMPLES_ROOT <path to your opencmiss folder>/examples\endcode or \code export OPENCMISSEXAMPLES_ROOT=<path to your opencmiss folder>/examples\endcode
\subsubsection project_setup_hpc_mpi Set MPI
Create a file called hostfile.list in your home directory.
Inside the file, add several lines of "hpc.bioeng.auckland.ac.nz"
In .rhost file in the home directory, add "hpc <username>" 
\subsubsection project_setup_aix_compile Compile
Change directory to opencmiss/cm
Change directory to examples/<example>
Use gmake.
This should result in a binary that you can run in the bin/rs6000-32-aix folder.

\subsection project_setup_linux On Ubuntu 9.10

\subsubsection project_setup_linux_compiler Install Compilers

There are two options for compilers under Linux - Intel or gnu compilers.

For the Intel compilers:

Download the Intel Fotran Compiler (e.g. Version 11.1).
Extract the file and follow the install.htm to install. 

For the GNU comilers:

Currently, only gfortran version 4.4 or greater will work. Download and install it (for Ubuntu 9.10, it can be downloaded from the Ubuntu software repositories). A version of the gfortran compilers for x86_64-linux can also be found in the opencmissextras svn repository. To obtain these versions change directory to the opencmissextras directory and issue the command:
\code 
svn co https://svn.physiomeproject.org/svn/opencmissextras/gfortran/trunk/ gfortran 
\endcode

\subsubsection project_setup_linux_environment Set environment

You need to set the environment variable to point to opencmiss and opencmissextras and execute the opencmiss_programmers script. 

If you use the bash shell you can do this by adding the following lines to your "~/.bashrc" file:
\code 
export OPENCMISS_ROOT=<path to your opencmiss folder>
export OPENCMISSEXTRAS_ROOT=<path to your opencmissextras folder>
export OPENCMISSEXAMPLES_ROOT=<path to your opencmiss folder>/examples
if [ -x ${OPENCMISSEXTRAS_ROOT}/utils/scripts/opencmiss_programmer.sh ]; then
  . ${OPENCMISSEXTRAS_ROOT}/utils/scripts/opencmiss_programmer.sh
fi
\endcode
If you use a c to tc shell you can do this by adding the following lines to your "/.cshrc" or "~/.tcshrc" file:
\code 
setenv OPENCMISS_ROOT <path to your opencmiss folder> 
setenv OPENCMISSEXTRAS_ROOT <path to your opencmissextras folder> 
setenv OPENCMISSEXAMPLES_ROOT <path to your opencmiss folder>/examples
if ( -r ${OPENCMISSEXTRAS_ROOT}/utils/scripts/opencmiss_programmer.csh ) then
  source ${OPENCMISSEXTRAS_ROOT}/utils/scripts/opencmiss_programmer.csh 
endif
\endcode 

The opencmiss_programmers script will let you customise the setup by setting environment variables after the root sets and before executing the script. These variables are:
- COMPILER : set the compiler to be used as the default. Options are gnu and intel.
- USE_OPENCMISS_GFORTRAN : if set use the gfortran in the OpenCMISSextras repository. If not set use the system gfortran.
- GNU_COMPILER_VERSION : if using the OpenCMISSextras gfortran set what version to use. Options are 4.4 and 4.5.
- OPENCMISSEXTRAS_RUN_CONFIG : select which configuration of the OpenCMISSextras binaries to use at runtime. Options are debug or optimised.
- MPI : select what version of MPI to use. Options are mpich2, intel or openmpi.
- INTEL_COMPILER_VERSION : if using the pre 12.0 version of the intel compilers the compiler version to use e.g., 11.1
- INTEL_COMPILER_BUILD : if using the pre 12.0 version of the intel compilers the build version to use e.g., 072
- INTEL_TRACE_COLLECTOR_VERSION : the version of the intel trace collector to use e.g., 8.0.1.009
- INTEL_MPI_VERSION : the version of the intel MPI to use e.g., 4.0.1.007

If you are using totalview, after installation you will also need to add
\code export LM_LICENSE_FILES=<path-to-the-flex-directory> \endcode respectively, 
\code setenv LM_LICENSE_FILES <path-to-the-flex-directory> \endcode

Details of totalview installation can be found <a href="http://www.roguewave.com/documents.aspx?entryid=1142&command=core_download">here</a>.  

-For ABI users, you may use totalview installed in hpc3. It is installed in /usr/toolwork. Please make sure that you have set LM_LICENSE_FILES
\code export LM_LICENSE_FILES=/usr/toolworks/flexlm-10.8.0-3/ \endcode respectively, 
\code setenv LM_LICENSE_FILES /usr/toolworks/flexlm-10.8.0-3/ \endcode

\subsubsection project_setup_linux_compile Compile

To build an example project issue the following command into the ".../opencmiss/examples/<example>/<sub-example>" directory:
\code make \endcode

Note, the default is the intel compiler. To explicitly use the gnu compiler use
\code make COMPILER=gnu \endcode
or set the COMPILER environment variable to be gnu. If the following error is received: 
\code /usr/bin/ld: cannot find -lMrm \endcode
Then you will need to ensure that you have the latest lesstif2-devel library installed on your machine. Also ensure that you have the latest openmotif-devel library installed. If a further error message is received:
\code /usr/bin/ld: cannot find -lXmu \endcode
Then install the libXmu-devel library. Finally if a further error message is received:
\code /usr/bin/ld: cannot find -lstdc++ \endcode
Then install the libstdc++-devel library.


To run the example project issue the following command into the directory where the executable is found (e.g. ".../opencmiss/examples/ClassicalField/NewLaplace/bin/x86_64-linux/mpich2/intel", depending on your example, sub-example, architecture, MPI library, and compiler):
\code mpd & mpirun -n 2 ./<executable> \endcode
to run the executable on two processors. To debug the project using TotalView:
\code mpd & mpirun -tv 2 ./<executable> \endcode
section project_setup_windows_vs2005 On Windows XP (Visual Studio 2005)
\subsubsection project_setup_windows_vs2005_compiler Install Compilers
Download Intel Fortran Compiler.
Execute the exe file and follow the installation wizard.
\subsubsection project_setup_windows_vs2005_mpi Install MPI
Download MPICH2 from here.
You can either download the source archive and follow the README.windows file to install or download the installer to install.
Set bin folder to the path
To start the MPI, run \code smpd -start \endcode in command window.
NOTE: as from MPICH2 version 1.0.7 the library names have changed. libmpich2 has now become libmpi!
\subsubsection project_setup_windows_vs2005_compile Compile and Debug
Build the Fortran project under the debug mode and generate the opencmisstest-debug.exe file.
In the C Project (since the Fortran projects do not support MPI cluster debugger), configure the debugging properties according to this.
The MPIShim location is in the path similar to C:\Program Files\Microsoft Visual Studio 8\Common7\IDE\Remote Debugger\x86\mpishim.exe.
Debug the C project.
\subsubsection project_setup_windows_vs2005_run Run
To run the project in the command window:
\code mpiexec -n 2 -localroot <path to the execution file> \endcode
\subsection project_setup_windows_vs2008 On Windows Vista (Visual Studio 2008)
\subsubsection project_setup_windows_vs2008_compiler Install Compilers
Download Intel Fortran Compiler from here.
Execute the exe file and follow the installation wizard.
\subsubsection project_setup_windows_vs2008_mpi Install MPI
Before you install MPICH2 under Vista you must turn off User Account Control
-# Goto Start -> Control Panel
-# Double-click on User Accounts
-# Click "Turn User Account Control on or off"
-# Untick "Use User Account Control (UAC) to help protect your computer" and click OK
-# Restart your computer.
.
Download from here. Choose the Win32 IA32 (binary) option.
Run the downloaded .msi file. Follow all instructions and install "For everybody".
Once you have installed MPICH2 you can turn User Account Control back on. Follow the instructions above and in 4. tick the "Use User Account Control ...".
NOTE: as from MPICH2 version 1.0.7 the library names have changed. libmpich2 has now become libmpi!
\subsubsection project_setup_windows_vs2008_compile Compile
For each example, go into the VisualOpenCMISS_08 folder. Double click the VisualOpenCMISS project solution file to lauch Visual Studio.

\section libraries_build Libraries Build (Optional)
\subsection libraries_build_petsc Compiling PETSc
Note this is assuming you have the Intel Fortran compiler version 10.1.024. Adjust the version string as necessary.
\subsubsection libraries_build_petsc_step1 Step1: Linux Environment installation and Compiler Environment Set up (For Windows only)
Under windows system:
- Install Cygwin if you need to. Cywin can be found here. Make sure you include the make and python modules when you install.
- Launch a Command Prompt Window
- Run the ifortvars.bat batch file to setup your Intel Fortran environment. e.g., "C:\Program Files\Intel\Compiler\Fortran\10.1.024\IA32\Bin\ifortvars.bat"
- Run the Cygwin batch file to setup the unix environment e.g., "C:\Cygwin\Cygwin.bat"
.
N.B: PetSc uses X, so make sure in linux environment, libX11-dev package is installed.
Also make sure blas and lapack (-dev) packages are installed. 
\subsubsection libraries_build_petsc_step2 Step2: Compile PETSC
\paragraph libraries_build_petsc_step2_windows For Windows
- Change to the opencmissextras PETSc directory e.g., if opencmissextras root is E:\opencmissextras and we are compiling PETSC version petsc-2.3.3-p8 then "cd /cygwin/e/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p8"
- If you have MPICH2 version 1.0.7 or greater edit the python/BuildSystem/config/packages/MPI.py file. Find the self.liblist_mpich line. After the line "['fmpich2.lib','mpich2.lib']," add the line "['fmpich2.lib','mpi.lib'],".
- \code PETSC_DIR=/cygdrive/e/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p8; export PETSC_DIR \endcode
- For a debug install issue the following commands
\code PETSC_ARCH=cygwin-c-debug; export PETSC_ARCH 
config/configure.py --prefix=/cygdrive/e/opencmissextras/cm/external/i386-win32-debug --with-shared=no --with-cc='win32fe cl' --with-fc='win32fe ifort' --with-cxx='win32fe cl' --download-f-blas-lapack=1 LIBS=-L'/cygdrive/c/Program\ Files/Intel/Compiler/Fortran/10.1.024/IA32/Lib' --with-debugging=yes
PETSC_ARCH=cygwin-c-debug; export PETSC_ARCH \endcode
For a non-debug install issue the following commands
\code PETSC_ARCH=cygwin-c-opt; export PETSC_ARCH
config/configure.py --prefix=/cygdrive/e/opencmissextras/cm/external/i386-win32 --with-shared=no --with-cc='win32fe cl' --with-fc='win32fe ifort' --with-cxx='win32fe cl' --download-f-blas-lapack=1 LIBS=-L'/cygdrive/c/Program\ Files/Intel/Compiler/Fortran/10.1.024/IA32/Lib' --with-debugging=no
PETSC_ARCH=cygwin-c-opt; export PETSC_ARCH \endcode
- \code make -e all \endcode
- \code make -e install \endcode
\paragraph libraries_build_petsc_step2_aix For AIX5.3
- Change to the opencmissextras PETSc directory. e.g /people/tyu011/workspace/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p8
- setenv PETSC_DIR /people/tyu011/workspace/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p8
- In config directory, copy the file aix5.1.0.0.py and rename it to aix5.3.0.0.py
- For a debug install issue the following commands
\code setenv PETSC_ARCH aix5.3.0.0
config/aix5.3.0.0.py --prefix=/people/tyu011/workspace/opencmissextras/cm/external/rs6000-32-aix-debug --with-debugging=yes
setenv PETSC_ARCH aix5.3.0.0 \endcode
For a non-debug install issue the following commands
\code setenv PETSC_ARCH aix5.3.0.0
config/aix5.3.0.0.py --prefix=/people/tyu011/workspace/opencmissextras/cm/external/rs6000-32-aix --with-debugging=no
setenv PETSC_ARCH aix5.3.0.0 \endcode
- \code make -e all \endcode
- \code make -e install \endcode
*/

\section makefile_structure Makefile Structure
The top level makefile (located in "<path to your root OpenCMISS directory>/opencmiss/cm/") will build the OpenCMISS library. Issue the following commands in the ".../opencmiss/cm/" directory:
\code make \endcode or, if you want to use the GNU compiler (Version 4.4 or greater) \code make COMPILER=gnu \endcode
In the examples directory there are separate compilable "applications" with individual makefiles, e.g. in ".../opencmiss/examples/ClassicalField/NewLaplace". How to compile the examples will be explained further below.

\section programmer_documentation Programmer documentation
This programmer documentation is written using doxygen with the source located in the ".../opencmiss/cm/doc/doxygen/additional_doc/" folder. The source XML code can be transformed into documents in HTML format. Issue the following command into the ".../opencmiss/cm/doc/doxygen/" directory:
\code doxygen Doxyfile \endcode
It will build a number of html pages in the ".../opencmiss/cm/doc/doxygen/Programmer/html" directory, which can be read by opening the "index.html" file in a web browser. 

