IF(CMAKE_HOST_UNIX)
  FIND_PROGRAM(CMAKE_UNAME uname /bin /usr/bin /usr/local/bin )
  IF(CMAKE_UNAME)
    EXEC_PROGRAM(uname OUTPUT_VARIABLE SYSNAME)
    EXEC_PROGRAM(uname ARGS -n OUTPUT_VARIABLE NODENAME)
    EXEC_PROGRAM(uname ARGS -m OUTPUT_VARIABLE MACHNAME)
  ENDIF(CMAKE_UNAME)
ELSE(CMAKE_HOST_UNIX)
  IF(CMAKE_HOST_WIN32)
    SET (SYSNAME "Windows")
    SET (CMAKE_HOST_SYSTEM_PROCESSOR "$ENV{COMPUTERNAME}")
    SET (CMAKE_HOST_SYSTEM_PROCESSOR "$ENV{PROCESSOR_ARCHITECTURE}")
  ENDIF(CMAKE_HOST_WIN32)
ENDIF(CMAKE_HOST_UNIX)

IF(NOT DEFINED PROF)
  SET (PROF false)
ENDIF(NOT DEFINED PROF)

IF(NOT DEFINED MPIPROF)
  SET (MPIPROF false)
ENDIF(NOT DEFINED MPIPROF)

IF(NOT DEFINED TAUPROF)
  SET (TAUPROF false)
ENDIF(NOT DEFINED TAUPROF)

IF(NOT DEFINED DEBUG)
  IF(PROF)
    SET(OPT true)
  ENDIF(PROF)
  IF(MPIPROF)
    SET(OPT true)
  ENDIF(MPIPROF)
  IF(NOT DEFINED OPT)
    SET(OPT false)
  ENDIF(NOT DEFINED OPT)
  IF(NOT OPT)
    SET(DEBUG true)
  ELSE(NOT OPT)
    SET(DEBUG false)
  ENDIF(NOT OPT)
ENDIF(NOT DEFINED DEBUG)

IF(NOT DEFINED MP)
  SET (MP false)
ENDIF(NOT DEFINED MP)

# set architecture dependent directories and default options

# defaults
SET(INSTRUCTION ${MACHNAME})

IF (${SYSNAME} MATCHES "Linux")
  SET(OPERATING_SYSTEM linux)
  IF("${MACHNAME}" MATCHES "i*86$")
    SET(INSTRUCTION i686)
  ENDIF("${MACHNAME}" MATCHES "i*86$")
  IF("${MACHNAME}" MATCHES "ppc*$")
    SET(INSTRUCTION ppc)
  ENDIF("${MACHNAME}" MATCHES "ppc*$")
  IF("${INSTRUCTION}" MATCHES "i686|ia64|x86_64") 
    SET(LIB_ARCH_DIR ${INSTRUCTION}-${OPERATING_SYSTEM})# no ABI required
  ENDIF("${INSTRUCTION}" MATCHES "i686|ia64|x86_64") 
  IF(NOT DEFINED ABI)
    SET(ABI 32)
    IF("${MACHNAME}" MATCHES "i*86$")
      SET(ABI 32)
    ENDIF("${MACHNAME}" MATCHES "i*86$")
    IF("${MACHINE}" MATCHES "ia64|x86_64") 
      SET(ABI 64)
    ENDIF("${MACHINE}" MATCHES "ia64|x86_64") 
    IF ("${MACHINE}" MATCHES "ppc64")# power-pc
      SET(ABI 64)
    ENDIF ("${MACHINE}" MATCHES "ppc64")
  ENDIF(NOT DEFINED ABI)
  IF(NOT DEFINED COMPILER)
    SET(COMPILER gnu)
  ENDIF(NOT DEFINED COMPILER)
  IF(NOT DEFINED MPI)
    SET(MPI mpich2)
  ENDIF(NOT DEFINED MPI)
ENDIF (${SYSNAME} MATCHES "Linux")
IF("${SYSNAME}" MATCHES "CYGWIN_NT-5.1|CYGWIN_NT-6.0|Windows")
  SET(LIB_ARCH_DIR ${INSTRUCTION}-${OPERATING_SYSTEM})# no ABI
  SET(ABI 32)
  SET(INSTRUCTION i386)
  SET(OPERATING_SYSTEM win32)
  IF(NOT DEFINED COMPILER)
    SET(COMPILER intel)
  ENDIF(NOT DEFINED COMPILER)
  IF(NOT DEFINED MPI)
    SET(MPI mpich2)
  ENDIF(NOT DEFINED MPI)
ENDIF("${SYSNAME}" MATCHES "CYGWIN_NT-5.1|CYGWIN_NT-6.0|Windows")
IF("${SYSNAME}" MATCHES "AIX")
  IF(NOT DEFINED ABI)
    IF(DEFINED OBJECT_MODE)
      IF("${OBJECT_MODE}" MATCHES "32_64")
        SET(ABI ${OBJECT_MODE})
      ENDIF("${OBJECT_MODE}" MATCHES "32_64")
    ENDIF(DEFINED OBJECT_MODE)
  ENDIF(NOT DEFINED ABI)
  IF(NOT DEFINED ABI)
    SET(ABI 32)
  ENDIF(NOT DEFINED ABI)
  SET(INSTRUCTION "rs6000")
  SET(OPERATING_SYSTEM "aix")
  IF(NOT DEFINED COMPILER)
    SET(COMPILER "ibm")
  ENDIF(NOT DEFINED COMPILER)
  IF(NOT DEFINED MPI)
    SET(MPI "poe")
  ENDIF(NOT DEFINED MPI)
ENDIF("${SYSNAME}" MATCHES "AIX")

SET(EXE_ABI_SUFFIX)
IF(${ABI} MATCHES 64)
  IF(NOT ${MACHNAME} MATCHES "ia64|x86_64")# not ia64, x86_64 
    SET(EXE_ABI_SUFFIX 64)
  ENDIF(NOT ${MACHNAME} MATCHES "ia64|x86_64")# not ia64, x86_64 
ENDIF(${ABI} MATCHES 64)

IF(NOT ${MP})
  SET(MT_SUFFIX)
  SET(MP_SUFFIX)
ELSE(NOT ${MP})
  SET(MT_SUFFIX "-mt")
  SET(MP_SUFFIX "_mp")
ENDIF(NOT ${MP})

IF(NOT ${PROF})
  IF(NOT ${MPIPROF})
    SET(PROF_SUFFIX)
  ELSE(NOT ${MPIPROF})
    SET(PROF_SUFFIX "-mpiprof")
  ENDIF(NOT ${MPIPROF})
ELSE(NOT ${PROF})
  IF(NOT ${MPIPROF})
    SET(PROF_SUFFIX "-prof")
  ELSE(NOT ${MPIPROF})
    SET(PROF_SUFFIX "-mpiprof")
  ENDIF(NOT ${MPIPROF})
ENDIF(NOT ${PROF})

IF(${DEBUG} MATCHES "true")
  SET(DEBUG_SUFFIX "-debug")
ELSE(${DEBUG} MATCHES "true")
  SET(DEBUG_SUFFIX) 
ENDIF(${DEBUG} MATCHES "true")

#keep this for now whilst we move over to the new directory structure
IF(${OPERATING_SYSTEM} MATCHES "linux")
  IF(${COMPILER} MATCHES "intel")
    SET(COMPILER_SUFFIX "-intel")
  ELSE(${COMPILER} MATCHES "intel")
    IF(${COMPILER} MATCHES "gnu")
      SET(COMPILER_SUFFIX "-gnu")
    ELSE(${COMPILER} MATCHES "gnu")
      IF(${COMPILER} MATCHES "ibm")
        SET(COMPILER_SUFFIX "-ibm")
      ELSE(${COMPILER} MATCHES "ibm")
        IF(${COMPILER} MATCHES "cray")
          SET(COMPILER_SUFFIX "-cray")
        ELSE(${COMPILER} MATCHES "cray")
          MESSAGE( STATUS "error invalid ${COMPILER} specification" )
        ENDIF(${COMPILER} MATCHES "cray")
      ENDIF(${COMPILER} MATCHES "ibm")
    ENDIF(${COMPILER} MATCHES "gnu") 
  ENDIF(${COMPILER} MATCHES "intel")
ELSE(${OPERATING_SYSTEM} MATCHES "linux")
  SET(COMPILER_SUFFIX)
ENDIF(${OPERATING_SYSTEM} MATCHES "linux")

# Useful functions

# This returns an empty string if not found
SET(searchdirs COMMAND($(firstword $(wildcard $(addsuffix /$(strip $2),$1)))))

# This still returns the name of the desired file if not found and so is useful for error checking and reporting.
SET(searchdirsforce COMMAND($(firstword $(wildcard $(addsuffix /$(strip $2),$1)) $2)))

# Convert a cygwin path to a normal windows path
SET(cygwintowin $($1))

# Create a shell that can pass environment variables
SET(ENV_FILE  /tmp/env)
SET(env_shell1 COMMAND($(shell rm -f $(ENV_FILE))$(foreach V,$1,$(shell echo export $V=$($V) >> $(ENV_FILE)))$(shell echo 'rm -f $3' >> $(ENV_FILE))$(shell echo '$2 >& $3' >> $(ENV_FILE))$(shell /bin/bash -e $(ENV_FILE) )))
SET(env_shell2  $(shell rm -f $(ENV_FILE))$(foreach V,$1,$(shell echo export $V=$($V) >> $(ENV_FILE)))$(shell echo '$2' >> $(ENV_FILE))$(shell echo 'rm -f $4'>> $(ENV_FILE))$(shell echo '$3 >& $4' >> $(ENV_FILE))$(shell /bin/bash -e $(ENV_FILE)))

# Create a shell that can call nmake from make 
SET(NMAKE_ENV_FILE /tmp/nmake_env)
SET(nmake_shell COMMAND($(shell rm -f $(NMAKE_ENV_FILE))$(shell echo 'rm -f $3' >> $(NMAKE_ENV_FILE))$(shell echo '$1' >> $(NMAKE_ENV_FILE))$(shell echo 'nmake MAKEFLAGS= $2 >& $3' >> $(NMAKE_ENV_FILE))$(shell /bin/bash -e $(NMAKE_ENV_FILE) ))) 

#-------------------------------------------------------------------------------------------------------------------

IF(NOT DEFINED MPI)
  SET(MPI mpich2)
ENDIF(NOT DEFINED MPI)

IF(NOT DEFINED USECELLML)
  SET(USECELLML false)
ENDIF(NOT DEFINED USECELLML)

IF(NOT DEFINED USEFIELDML)
  SET(USEFIELDML false)
ENDIF(NOT DEFINED USEFIELDML)

IF(${MPI} STREQUAL intel)
  IF (${OPERATING_SYSTEM} STREQUAL linux)
    IF(NOT DEFINED I_MPI_ROOT)
      MESSAGE(FATAL_ERROR "Intel MPI libraries not setup")
    ENDIF(NOT DEFINED I_MPI_ROOT)
  ELSE(${OPERATING_SYSTEM} STREQUAL linux)
    MESSAGE(FATAL_ERROR "can only use intel mpi with Linux")
  ENDIF(${OPERATING_SYSTEM} STREQUAL linux)
ELSEIF(NOT (${MPI} MATCHES "(mpich2|openmpi|mvapich2|cray|poe)"))
  MESSAGE( FATAL_ERROR "unknown MPI type - ${MPI}")
ENDIF(${MPI} STREQUAL intel)

IF(${MPIPROF} STREQUAL true)
  IF($(MPI) STREQUAL intel)
    IF(NOT DEFINED VT_ROOT)
      MESSAGE(FATAL_ERROR "Intel MPI libraries not setup")
    ENDIF(NOT DEFINED VT_ROOT)
    IF(NOT DEFINED VT_ADD_LIBS)
      MESSAGE(FATAL_ERROR "intel trace collector not setup")
    ENDIF(NOT DEFINED VT_ADD_LIBS)
  ENDIF($(MPI) STREQUAL intel)
ENDIF(${MPIPROF} STREQUAL true)

SET(BIN_ARCH_DIR ${INSTRUCTION}-${OPERATING_SYSTEM})
SET(LIB_ARCH_DIR ${INSTRUCTION}-${ABI}-${OPERATING_SYSTEM})
